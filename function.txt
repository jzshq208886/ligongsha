respond第15626行添加if，15669行修改if
				respond:function(){
					'step 0'
					var cardaudio=true;
					if(event.skill){
						if(lib.skill[event.skill].audio){
							cardaudio=false;
						}
						if(event.logSkill!==false) player.logSkill(event.skill);
						player.checkShow(event.skill,true);
						if(lib.skill[event.skill].onrespond&&!game.online){
							lib.skill[event.skill].onrespond(event,player);
						}
					}
					else if(!event.nopopup) player.tryCardAnimate(card,card.name,'wood');
					if(cardaudio&&event.getParent(3).name=='useCard'){
						game.broadcastAll(function(player,card){
							if(lib.config.background_audio){
								var sex=player.sex=='female'?'female':'male';
								var audioinfo=lib.card[card.name].audio;
								// if(audioinfo||true){
									if(typeof audioinfo=='string'&&audioinfo.indexOf('ext:')==0){
										game.playAudio('..','extension',audioinfo.slice(4),card.name+'_'+sex);
									}
									else{
										game.playAudio('card',sex,card.name);
									}
								// }
								// else{
								// 	game.playAudio('card/default');
								// }
							}
						},player,card);
					}
					if(event.skill){
						if(player.stat[player.stat.length-1].skill[event.skill]==undefined){
							player.stat[player.stat.length-1].skill[event.skill]=1;
						}
						else{
							player.stat[player.stat.length-1].skill[event.skill]++;
						}
						var sourceSkill=get.info(event.skill).sourceSkill;
						if(sourceSkill){
							if(player.stat[player.stat.length-1].skill[sourceSkill]==undefined){
								player.stat[player.stat.length-1].skill[sourceSkill]=1;
							}
							else{
								player.stat[player.stat.length-1].skill[sourceSkill]++;
							}
						}
					}
					if(cards.length&&!card.isCard){  // if(cards.length&&(cards.length>1||cards[0].name!=card.name)){
						game.log(player,'打出了',card,'（',cards,'）');
					}
					else{
						game.log(player,'打出了',card);
					}
					player.actionHistory[player.actionHistory.length-1].respond.push(event);
					if(cards.length){
						var owner=(get.owner(cards[0])||player);
						var next=owner.lose(cards,'visible',ui.ordering).set('type','use');
						var directDiscard=[];
						for(var i=0;i<cards.length;i++){
							if(!next.cards.contains(cards[i])){
								directDiscard.push(cards[i]);
							}
						}
						if(directDiscard.length) game.cardsGotoOrdering(directDiscard);
					}
					if(event.animate!=false&&event.throw!==false){
						for(var i=0;i<cards.length;i++){
							player.$throw(cards[i]);
							if(event.highlight){
								cards[i].clone.classList.add('thrownhighlight');
								game.addVideo('highlightnode',player,get.cardInfo(cards[i]));
							}
						}
						if(event.highlight){
							game.broadcast(function(cards){
								for(var i=0;i<cards.length;i++){
									if(cards[i].clone){
										cards[i].clone.classList.add('thrownhighlight');
									}
								}
							},cards);
						}
					}
					event.trigger('respond');
					'step 1'
					game.delayx(0.5);
				},

if(game.getAllGlobalHistory==undefined){
			game.getAllGlobalHistory=function(key,filter){
				var list=[];
				var all=_status.globalHistory;
				for(var j=0;j<all.length;j++){
					if(!key||!all[j][key]){
						list.push(all[j]);
					}
					else{
						if(!filter) list.addArray(all[j][key]);
						else{
							var history=all[j][key].slice(0);
							for(var i=0;i<history.length;i++){
								if(filter(history[i])) list.push(history[i]);
							}
						}
					}
				}
				return list;
			};
		}
		_status.globalHistory=[{
			cardMove:[],
			custom:[],
			useCard:[],
			changeHp:[],
		}],
		lib.element.content.useCard=function(){
			"step 0"
			if(!card){
				console.log('err: no card',get.translation(event.player));
				event.finish();
				return;
			}
			if(!get.info(card,false).noForceDie) event.forceDie=true;
			if(cards.length){
				var owner=(get.owner(cards[0])||player);
				var next=owner.lose(cards,'visible',ui.ordering).set('type','use');
				var directDiscard=[];
				for(var i=0;i<cards.length;i++){
					if(!next.cards.contains(cards[i])){
						directDiscard.push(cards[i]);
					}
				}
				if(directDiscard.length) game.cardsGotoOrdering(directDiscard);
			}
			//player.using=cards;
			var cardaudio=true;
			if(event.skill){
				if(lib.skill[event.skill].audio){
					cardaudio=false;
				}
				if(lib.skill[event.skill].log!=false){
					player.logSkill(event.skill);
				}
				if(get.info(event.skill).popname){
					player.tryCardAnimate(card,event.card.name,'metal',true);
				}
			}
			else if(!event.nopopup){
				if(lib.translate[event.card.name+'_pop']){
					player.tryCardAnimate(card,lib.translate[event.card.name+'_pop'],'metal');
				}
				else{
					player.tryCardAnimate(card,event.card.name,'metal');
				}
			}	
			if(event.audio===false){
				cardaudio=false;
			}
			if(cardaudio){
				game.broadcastAll(function(player,card){
					if(lib.config.background_audio){
						if(get.type(card)=='equip'&&!lib.config.equip_audio) return;
						var sex=player.sex=='female'?'female':'male';
						var audioinfo=lib.card[card.name].audio;
						// if(audioinfo||true){
							if(card.name=='sha'&&(card.nature=='fire'||card.nature=='thunder'||card.nature=='ice'||card.nature=='stab')){
								game.playAudio('card',sex,card.name+'_'+card.nature);
							}
							else{
								if(typeof audioinfo=='string'){
									if(audioinfo.indexOf('ext:')==0) game.playAudio('..','extension',audioinfo.slice(4),card.name+'_'+sex);
									else game.playAudio('card',sex,audioinfo);
								}
								else{
									game.playAudio('card',sex,card.name);
								}
							}
						// }
						// else if(get.type(card)!='equip'){
						// 	game.playAudio('card/default');
						// }
					}
				},player,card);
			}
			if(event.animate!=false&&event.line!=false){
				if((card.name=='wuxie'||card.name=='youdishenru')&&event.getParent().source){
					var lining=event.getParent().sourcex||event.getParent().source2||event.getParent().source;
					if(lining==player&&event.getParent().sourcex2){
						lining=event.getParent().sourcex2;
					}
					if(Array.isArray(lining)&&event.getTrigger().name=='jiedao'){
						player.line(lining[0],'green');
					}
					else{
						player.line(lining,'green');
					}
				}
				else{
					var config={};
					if(card.nature=='fire'||
						(card.classList&&card.classList.contains('fire'))){
						config.color='fire';
					}
					else if(card.nature=='thunder'||
						(card.classList&&card.classList.contains('thunder'))){
						config.color='thunder';
					}
					if(event.addedTarget){
						player.line2(targets.concat(event.addedTargets),config);
					}
					else if(get.info(card,false).multitarget&&targets.length>1&&!get.info(card,false).multiline){
						player.line2(targets,config);
					}
					else{
						player.line(targets,config);
					}
				}
				if(event.throw!==false) player.$throw(cards);
				if(lib.config.sync_speed&&cards[0]&&cards[0].clone){
					var waitingForTransition=get.time();
					event.waitingForTransition=waitingForTransition;
					cards[0].clone.listenTransition(function(){
						if(_status.waitingForTransition==waitingForTransition&&_status.paused){
							game.resume();
						}
						delete event.waitingForTransition;
					});
				}
			}
			event.id=get.id();
			event.excluded=[];
			event.directHit=[];
			event.customArgs={default:{}};
			if(typeof event.baseDamage!='number') event.baseDamage=get.info(card,false).baseDamage||1;
			if(event.oncard){
				event.oncard(event.card,event.player);
			}
			player.actionHistory[player.actionHistory.length-1].useCard.push(event);
			game.getGlobalHistory().useCard.push(event);
			if(event.addCount!==false){
				if(player.stat[player.stat.length-1].card[card.name]==undefined){
					player.stat[player.stat.length-1].card[card.name]=1;
				}
				else{
					player.stat[player.stat.length-1].card[card.name]++;
				}
			}
			if(event.skill){
				if(player.stat[player.stat.length-1].skill[event.skill]==undefined){
					player.stat[player.stat.length-1].skill[event.skill]=1;
				}
				else{
					player.stat[player.stat.length-1].skill[event.skill]++;
				}
				var sourceSkill=get.info(event.skill).sourceSkill;
				if(sourceSkill){
					if(player.stat[player.stat.length-1].skill[sourceSkill]==undefined){
						player.stat[player.stat.length-1].skill[sourceSkill]=1;
					}
					else{
						player.stat[player.stat.length-1].skill[sourceSkill]++;
					}
				}
			}
			if(targets.length){
				var str=(targets.length==1&&targets[0]==player)?'#b自己':targets;
				if(cards.length&&!card.isCard){
					if(event.addedTarget){
						game.log(player,'对',str,'使用了',card,'（',cards,'，指向',event.addedTargets,'）');
					}
					else{
						game.log(player,'对',str,'使用了',card,'（',cards,'）');
					}
				}
				else{
					if(event.addedTarget){
						game.log(player,'对',str,'使用了',card,'（指向',event.addedTargets,'）');
					}
					else{
						game.log(player,'对',str,'使用了',card);
					}
				}
			}
			else{
				if(cards.length&&!card.isCard){
					if(event.addedTarget){
						game.log(player,'使用了',card,'（',cards,'，指向',event.addedTargets,'）');
					}
					else{
						game.log(player,'使用了',card,'（',cards,'）');
					}
				}
				else{
					if(event.addedTarget){
						game.log(player,'使用了',card,'（指向',event.addedTargets,'）');
					}
					else{
						game.log(player,'使用了',card);
					}
				}
			}
			if(card.name=='wuxie'){							game.logv(player,[card,cards],[event.getTrigger().card]);
				}
			else{
				game.logv(player,[card,cards],targets);
			}
			event.trigger('useCard1');
			"step 1"
			event.trigger('useCard2');
			"step 2"
			event.trigger('useCard');
			event._oncancel=function(){
				game.broadcastAll(function(id){
					if(ui.tempnowuxie&&ui.tempnowuxie._origin==id){
						ui.tempnowuxie.close();
						delete ui.tempnowuxie;
					}
				},event.id);
			};
			"step 3"
			event.sortTarget=function(animate,sort){
				var info=get.info(card,false);
				if(num==0&&targets.length>1){
					if(!info.multitarget){
						if(!event.fixedSeat&&!sort){
							targets.sortBySeat((_status.currentPhase||player));
						}
						if(animate)	for(var i=0;i<targets.length;i++){
							targets[i].animate('target');
						}
					}
					else if(animate){
						for(var i=0;i<targets.length;i++){
							targets[i].animate('target');
						}
					}
				}
			}
			event.sortTarget();
			event.getTriggerTarget=function(list1,list2){
				var listx=list1.slice(0).sortBySeat((_status.currentPhase||player));
				for(var i=0;i<listx.length;i++){
					if(get.numOf(list2,listx[i])<get.numOf(listx,listx[i])) return listx[i];
				}
				return null;
			}
			"step 4"
			if(event.all_excluded) return;
			if(!event.triggeredTargets1) event.triggeredTargets1=[];
			var target=event.getTriggerTarget(targets,event.triggeredTargets1);
			if(target){
				event.triggeredTargets1.push(target);
				var next=game.createEvent('useCardToPlayer',false);
				if(event.triggeredTargets1.length==1) next.isFirstTarget=true;
				next.setContent('emptyEvent');
				next.targets=targets;
				next.target=target;
				next.card=card;
				next.cards=cards;
				next.player=player;
				next.excluded=event.excluded;
				next.directHit=event.directHit;
				next.customArgs=event.customArgs;
				if(event.forceDie) next.forceDie=true;
				event.redo();
			}
			"step 5"
			if(event.all_excluded) return;
			if(!event.triggeredTargets2) event.triggeredTargets2=[];
			var target=event.getTriggerTarget(targets,event.triggeredTargets2);
			if(target){
				event.triggeredTargets2.push(target);
				var next=game.createEvent('useCardToTarget',false);
				if(event.triggeredTargets2.length==1) next.isFirstTarget=true;
				next.setContent('emptyEvent');
				next.targets=targets;
				next.target=target;
				next.card=card;
				next.cards=cards;
				next.player=player;
				next.excluded=event.excluded;
				next.directHit=event.directHit;
				next.customArgs=event.customArgs;
				if(event.forceDie) next.forceDie=true;
				event.redo();
			}
			"step 6"
			var info=get.info(card,false);
			if(!info.nodelay&&event.animate!=false){
				if(event.delayx!==false){
					if(event.waitingForTransition){
						_status.waitingForTransition=event.waitingForTransition;
						game.pause();
					}
					else{
						game.delayx();
					}
				}
			}
			"step 7"
			if(event.all_excluded) return;
			if(!event.triggeredTargets3) event.triggeredTargets3=[];
			var target=event.getTriggerTarget(targets,event.triggeredTargets3);
			if(target){
				event.triggeredTargets3.push(target);
				var next=game.createEvent('useCardToPlayered',false);
				if(event.triggeredTargets3.length==1) next.isFirstTarget=true;
				next.setContent('emptyEvent');
				next.targets=targets;
				next.target=target;
				next.card=card;
				next.cards=cards;
				next.player=player;
				next.excluded=event.excluded;
				next.directHit=event.directHit;
				next.customArgs=event.customArgs;
				if(event.forceDie) next.forceDie=true;
				event.redo();
			}
			"step 8"
			if(event.all_excluded) return;
			if(!event.triggeredTargets4) event.triggeredTargets4=[];
			var target=event.getTriggerTarget(targets,event.triggeredTargets4);
			if(target){
				event.triggeredTargets4.push(target);
				var next=game.createEvent('useCardToTargeted',false);
				if(event.triggeredTargets4.length==1) next.isFirstTarget=true;
				next.setContent('emptyEvent');
				next.targets=targets;
				next.target=target;
				next.card=card;
				next.cards=cards;
				next.player=player;
				next.excluded=event.excluded;
				next.directHit=event.directHit;
				next.customArgs=event.customArgs;
				if(event.forceDie) next.forceDie=true;
				if(targets.length==event.triggeredTargets4.length){
					event.sortTarget();
				}
				event.redo();
			}
			"step 9"
			var info=get.info(card,false);
			if(info.contentBefore){
				var next=game.createEvent(card.name+'ContentBefore');
				next.setContent(info.contentBefore);
				next.targets=targets;
				next.card=card;
				next.cards=cards;
				next.player=player;
				next.type='precard';
				if(event.forceDie) next.forceDie=true;
			}
			else if(info.reverseOrder&&get.is.versus()&&targets.length>1){
				var next=game.createEvent(card.name+'ContentBefore');
				next.setContent('reverseOrder');
				next.targets=targets;
				next.card=card;
				next.cards=cards;
				next.player=player;
				next.type='precard';
				if(event.forceDie) next.forceDie=true;
			}
			else if(info.singleCard&&info.filterAddedTarget&&event.addedTargets&&event.addedTargets.length<targets.length){
				var next=game.createEvent(card.name+'ContentBefore');
				next.setContent('addExtraTarget');
				next.target=target;
				next.targets=targets;
				next.card=card;
				next.cards=cards;
				next.player=player;
				next.type='precard';
				next.addedTarget=event.addedTarget;
				next.addedTargets=event.addedTargets;
				if(event.forceDie) next.forceDie=true;
			}
			"step 10"
			if(event.all_excluded) return;
			var info=get.info(card,false);
			if(num==0&&targets.length>1){
				event.sortTarget(true,true);
			}
			if(targets[num]&&targets[num].isDead()) return;
			if(targets[num]&&targets[num].isOut()) return;
			if(targets[num]&&targets[num].removed) return;
			if(targets[num]&&info.ignoreTarget&&info.ignoreTarget(card,player,targets[num])) return;
			if(targets.length==0&&!info.notarget) return;
			if(targets[num]&&event.excluded.contains(targets[num])){
			var next=game.createEvent('useCardToExcluded',false);
				next.setContent('emptyEvent');
				next.targets=targets;
				next.target=targets[num];
				next.num=num;
				next.card=card;
				next.cards=cards;
				next.player=player;
				return;
			};
			var next=game.createEvent(card.name);
			next.setContent(info.content);
			next.targets=targets;
			next.card=card;
			next.cards=cards;
			next.player=player;
			next.num=num;
			next.type='card';
			next.skill=event.skill;
			next.multitarget=info.multitarget;
			next.preResult=event.preResult;
			next.baseDamage=event.baseDamage;
			if(event.forceDie) next.forceDie=true;
			if(event.addedTargets){
				next.addedTargets=event.addedTargets;
				next.addedTarget=event.addedTargets[num];
				next._targets=event._targets;
			}
			if(info.targetDelay===false){
				event.targetDelay=false;
			}
			next.target=targets[num];
			for(var i in event.customArgs.default) next[i]=event.customArgs.default[i];
			if(next.target&&event.customArgs[next.target.playerid]){
				var customArgs=event.customArgs[next.target.playerid];
				for(var i in customArgs) next[i]=customArgs[i];
			}
			if(next.target&&event.directHit.contains(next.target)) next.directHit=true;
			if(next.target&&!info.multitarget){
				if(num==0&&targets.length>1){
					// var ttt=next.target;
					// setTimeout(function(){ttt.animate('target');},0.5*lib.config.duration);
				}
				else{
					next.target.animate('target');
				}
			}
			if(!info.nodelay&&num>0){
				if(event.targetDelay!==false){
					game.delayx(0.5);
				}
			}
			"step 11"
			if(event.all_excluded) return;
			if(!get.info(event.card,false).multitarget&&num<targets.length-1&&!event.cancelled){
				event.num++;
				event.goto(10);
			}
			"step 12"
			if(get.info(card,false).contentAfter){
				var next=game.createEvent(card.name+'ContentAfter');
				next.setContent(get.info(card,false).contentAfter);
				next.targets=targets;
				next.card=card;
				next.cards=cards;
				next.player=player;
				next.preResult=event.preResult;
				next.type='postcard';
				if(event.forceDie) next.forceDie=true;
			}
			"step 13"
			if(event.postAi){
				event.player.logAi(event.targets,event.card);
			}
			if(event._result){
				event.result=event._result;
			}
			//delete player.using;
			if(document.getElementsByClassName('thrown').length){
				if(event.delayx!==false) game.delayx();
			}
			else{
				event.finish();
			}
			"step 14"
			event._oncancel();
		};
		lib.element.content.phasing=function(){
			'step 0'
			while(ui.dialogs.length){
				ui.dialogs[0].close();
			}
			if(!player.noPhaseDelay&&lib.config.show_phase_prompt){
				player.popup('回合开始');
			}
			if(lib.config.glow_phase){
				if(_status.currentPhase){
					_status.currentPhase.classList.remove('glow_phase');
					game.broadcast(function(player){
						player.classList.remove('glow_phase');
					},_status.currentPhase);
				}
				player.classList.add('glow_phase');
				game.broadcast(function(player){
					player.classList.add('glow_phase');
				},player);
			}
			_status.currentPhase=player;
			_status.discarded=[];
			game.phaseNumber++;
			player.phaseNumber++;
			game.syncState();
			game.addVideo('phaseChange',player);
			if(game.phaseNumber==1){
				delete player._start_cards;
				if(lib.configOL.observe){
					lib.configOL.observeReady=true;
					game.send('server','config',lib.configOL);
				}
			}
			game.log();
			game.log(player,'的回合开始');
			player._noVibrate=true;
			if(get.config('identity_mode')!='zhong'&&get.config('identity_mode')!='purple'&&!_status.connectMode){
				var num;
				switch(get.config('auto_identity')){
					case 'one':num=1;break;
					case 'two':num=2;break;
					case 'three':num=3;break;
					case 'always':num=-1;break;
					default:num=0;break;
				}
				if(num&&!_status.identityShown&&game.phaseNumber>game.players.length*num&&game.showIdentity){
					if(!_status.video) player.popup('显示身份');
					_status.identityShown=true;
					game.showIdentity(false);
				}
			}
			player.ai.tempIgnore=[];
			_status.globalHistory.push({
				cardMove:[],
				custom:[],
				useCard:[],
				changeHp:[],
			});
			game.countPlayer2(function(current){
				current.actionHistory.push({useCard:[],respond:[],skipped:[],lose:[],gain:[],sourceDamage:[],damage:[],custom:[],useSkill:[]});
				current.stat.push({card:{},skill:{}});
				if(event.parent._roundStart){
					current.getHistory().isRound=true;
					current.getStat().isRound=true;
				}
			});
			player.getHistory().isMe=true;
			player.getStat().isMe=true;
			if(event.parent._roundStart){
				game.getGlobalHistory().isRound=true;
			}
			if(ui.land&&ui.land.player==player){
				game.addVideo('destroyLand');
				ui.land.destroy();
			}
			'step 1'
			event.trigger('phaseBeginStart');
		};